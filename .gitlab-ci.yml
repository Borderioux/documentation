stages:
  - lint
  - dependencies
  - build
  - test
  - deploy
  - post-deploy
  - cleanup

variables:
  PREVIEW_CONFIG: "config/preview.yaml"
  LIVE_CONFIG: "config/live.yaml"
  ARTIFACT_RESOURCE: "public"
  LIVE_DOMAIN: "https://docs.datadoghq.com/"
  PREVIEW_DOMAIN: "https://docs-staging.datadoghq.com/"

# ================== templates ================== #
.base_template: &base_template
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/corp-ci:david.jones_ci-updates
  before_script:
    - find local/bin/ -type f -exec cp {} /usr/local/bin \;  # load scripts
    - find local/etc/ -type f -exec cp {} /etc \;  # load configs
    - source /usr/local/bin/helpers.sh  # source helpers so they are available in the container
  tags:
    - "runner:main"
    - "size:large"
  only:
    - branches

# ================== preview ================== #
# If the branch has a name of <slack-user>/<feature-name> then ci builds a preview site

# Lint stage
# we want to fail as soon as possible if syntax is incorrect

lint:yaml:
  <<: *base_template
  stage: lint
  environment: "preview"
  script:
    - cp -r /etc/node_modules .
    - yarn add yamllint
    - node_modules/.bin/yamllint data/**/*.yaml || exit 1
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

lint:md:
  <<: *base_template
  stage: lint
  environment: "preview"
  script:
    - cp -r /etc/node_modules .
    - yarn add markdownlint-cli
    - node_modules/.bin/markdownlint content/**/*.md
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

# Dependencies Stage
# In order to build the site we need dependencies, these are built as seperate jobs and passed to the build stage

deps:integrations:
  <<: *base_template
  stage: dependencies
  environment: "preview"
  variables:
    CONFIGURATION_FILE: "./local/etc/pull_config_preview.yaml"
  script:
    - sync_integration_descriptions
  artifacts:
    untracked: true
    when: on_success
    paths:
      - content/en/integrations/*.md
      - content/en/agent/basic_agent_usage/heroku.md
      - content/en/developers/integrations/*.md
      - data/service_checks/*.json
      - data/integrations/*.yaml
    expire_in: 1 week
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

deps:placeholders:
  <<: *base_template
  stage: dependencies
  environment: "preview"
  script:
    - placehold_translations
  artifacts:
    untracked: false
    when: on_success
    paths:
      - content/fr/**/*.md
      - content/ja/**/*.md
    expire_in: 1 week
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

deps:assets:
  <<: *base_template
  stage: dependencies
  environment: "preview"
  script:
    - version_static_assets
  artifacts:
    untracked: false
    when: on_success
    paths:
      - static/js/**/*.js
      - static/css/**/*.css
      - data/manifests/*.json
    expire_in: 1 week
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

deps:changes:
  <<: *base_template
  stage: dependencies
  environment: "preview"
  variables:
    LANGUAGES: "fr,ja"
  script:
    - echo "Change detection..."
    - python3 -m pip install sh
    - python3 ./local/bin/py/change_detect.py
  artifacts:
    untracked: false
    when: on_success
    paths:
      - continue_*
    expire_in: 1 week
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

# Build Stage
# We build the different languages in different jobs and only build if deps:changes says so

build:hugo:en:
  <<: *base_template
  stage: build
  environment: "preview"
  script:
    - cp -r /etc/node_modules .
    - update_preview_baseurl
    - HUGO_DISABLELANGUAGES="fr ja" ./node_modules/.bin/hugo --environment "${CI_ENVIRONMENT_NAME}" --verbose --minify
  artifacts:
    untracked: false
    when: on_success
    paths:
      - public/
    expire_in: 1 week
  dependencies:
    - deps:assets
    - deps:integrations
  only:
    refs:
      - /.+?\/[a-zA-Z0-9_-]+/

build:hugo:fr:
  <<: *base_template
  stage: build
  environment: "preview"
  script:
    # Only build the fr site if deps:changes created continue_fr
    - "if [[ -f continue_fr ]]; then
        cp -r /etc/node_modules .;
        update_preview_baseurl;
        HUGO_DISABLELANGUAGES='ja' ./node_modules/.bin/hugo --environment '${CI_ENVIRONMENT_NAME}' --verbose --minify;
      else
        echo 'No fr related changes, nothing to do';
      fi"
  artifacts:
    untracked: false
    when: on_success
    paths:
      - public/fr/
    expire_in: 1 week
  dependencies:
    - deps:assets
    - deps:integrations
    - deps:placeholders
    - deps:changes
  only:
    refs:
      - /.+?\/[a-zA-Z0-9_-]+/

build:hugo:ja:
  <<: *base_template
  stage: build
  environment: "preview"
  script:
    # Only build the ja site if deps:changes created continue_ja
    - "if [[ -f continue_ja ]]; then
        cp -r /etc/node_modules .;
        update_preview_baseurl;
        HUGO_DISABLELANGUAGES='fr' ./node_modules/.bin/hugo --environment '${CI_ENVIRONMENT_NAME}' --verbose --minify;
      else
        echo 'No ja related changes, nothing to do';
      fi"
  artifacts:
    untracked: false
    when: on_success
    paths:
      - public/ja/
    expire_in: 1 week
  dependencies:
    - deps:assets
    - deps:integrations
    - deps:placeholders
    - deps:changes
  only:
    refs:
      - /.+?\/[a-zA-Z0-9_-]+/

# Test Stage
# After the build is complete the test stage is for running any final checks on the build output before shipping it

check:links:
  <<: *base_template
  stage: test
  environment: "preview"
  variables:
    URL: ${PREVIEW_DOMAIN}
    DISALLOW_BOTS: "1"
  script:
    #- node /etc/node_modules/link-checker/dd-link-checker.js -e preview -c ${CI_PROJECT_DIR}/local/etc/link-check-config.js
    - echo "test links coming soon"
  dependencies:
    - build:hugo:en
    - build:hugo:ja
    - build:hugo:fr
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

check:images:
  <<: *base_template
  stage: test
  environment: "preview"
  script:
    - echo "test images coming soon"
  dependencies:
    - build:hugo:en
    - build:hugo:ja
    - build:hugo:fr
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

check:trademarks:
  <<: *base_template
  stage: test
  environment: "preview"
  allow_failure: true
  script:
    - check_missing_tms
  dependencies:
    - build:hugo:en
    - build:hugo:ja
    - build:hugo:fr
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

# Deploy Stage
# Lets ship it!

deploy:site:
  <<: *base_template
  stage: deploy
  environment: "preview"
  variables:
    URL: ${PREVIEW_DOMAIN}
    CONFIG: ${PREVIEW_CONFIG}
  script:
    - push_site_to_s3
  dependencies:
    - build:hugo:en
    - build:hugo:ja
    - build:hugo:fr
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

# Post Deploy Stage
# Lets notify the success or failure of the build!

notify:failure:
  stage: post-deploy
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/slack-notifier:latest
  tags:
    - "runner:main"
    - "size:large"
  variables:
    MESSAGE: ':weary: ${CI_COMMIT_SHA}|${CI_COMMIT_REF_NAME} failed. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}|see pipeline>'
  only:
    - /.+?\/[a-zA-Z0-9_-]+/
  script:
    - /usr/local/bin/notify.sh
  when: on_failure

notify:success:
  stage: post-deploy
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/slack-notifier:latest
  tags:
    - "runner:main"
    - "size:large"
  variables:
    MESSAGE: '<https://github.com/DataDog/documentation/commit/${CI_COMMIT_SHA}|${CI_COMMIT_REF_NAME}> is ready for preview. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}|checks running>.Site: <${PREVIEW_DOMAIN}${CI_COMMIT_REF_NAME}>'
  only:
    - /.+?\/[a-zA-Z0-9_-]+/
  script:
    - /usr/local/bin/notify.sh
  when: on_success

#build_preview:
#  <<: *base_template
#  stage: build
#  environment: "preview"
#  variables:
#    URL: ${PREVIEW_DOMAIN}
#    CONFIG: ${PREVIEW_CONFIG}
#    MESSAGE: ":gift_heart: Your preview site is available!\nNow running tests..."
#    CONFIGURATION_FILE: "./local/etc/pull_config_preview.yaml"
#  script:
#    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} started" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "info"
#    - version_static_assets
#    - sync_integration_descriptions
#    #- sync_integration_descriptions_cached
#    - placehold_translations
#    - update_preview_baseurl
#    - build_hugo_site_new
#    - collect_static_assets
#    # remove service_checks json as we don't need to s3 push that..
#    - rm -rf data/service_checks
#    - push_site_to_s3
#    - notify_slack "<https://github.com/DataDog/documentation/commit/${CI_COMMIT_SHA}|${CI_COMMIT_REF_NAME}> is ready for preview. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}| checks running>." "#31b834"
#    #- remove_static_from_repo
#    #- create_artifact
#    #- create_artifact_untracked
#  artifacts:
#    paths:
#      - ${ARTIFACT_RESOURCE}
#  only:
#    - /.+?\/[a-zA-Z0-9_-]+/
#
#test_preview_link_checks:
#  <<: *base_template
#  stage: post-deploy
#  environment: "preview"
#  variables:
#    URL: ${PREVIEW_DOMAIN}
#    DISALLOW_BOTS: "1"
#  script:
#    - node /etc/node_modules/link-checker/dd-link-checker.js -e preview -c ${CI_PROJECT_DIR}/local/etc/link-check-config.js
#  only:
#    - /.+?\/[a-zA-Z0-9_-]+/
#
#test_missing_tms_preview:
#  <<: *base_template
#  stage: post-deploy
#  environment: "preview"
#  allow_failure: true
#  dependencies:
#    - build_preview
#  script:
#    - check_missing_tms
#  only:
#    - /.+?\/[a-zA-Z0-9_-]+/

# ================== live ================== #
build_live:
  <<: *base_template
  stage: build
  environment: "live"
  variables:
    CONFIG: ${LIVE_CONFIG}
    URL: ${LIVE_DOMAIN}
    UNTRACKED_EXTRAS: "data,content/en/integrations,content/en/agent/basic_agent_usage/heroku.md,content/en/developers/integrations"
    CONFIGURATION_FILE: "./local/etc/pull_config.yaml"
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} started" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "info"
    - notify_slack "<https://github.com/DataDog/documentation/commit/${CI_COMMIT_SHA}|${CI_COMMIT_SHA:0:8}> sent to gitlab for production deployment. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}|details>" "#FFD700"
    - version_static_assets
    - sync_integration_descriptions
    - sync_integration_metrics
    - placehold_translations
    - build_hugo_site_new
    - collect_static_assets
    - push_site_to_s3
    - chmod +x ./local/bin/py/algolia_index.py && ./local/bin/py/algolia_index.py -d "['js', 'images', 'fonts', 'en', 'css', 'search', 'json', 'error', 'matts quick tips', 'videos']" -l "['fr','ja']" -c "./local/etc/docsdatadoghq.json"
    - create_artifact
    - create_artifact_untracked
    - chmod +x ./local/bin/py/missing_metrics.py && ./local/bin/py/missing_metrics.py -k $(get_secret 'dd-demo-api-key') -p $(get_secret 'dd-demo-app-key') -a $(get_secret 'dd_api_key') -b $(get_secret 'dd-app-key')
  artifacts:
    when: on_success
    paths:
      - local/etc/docsdatadoghq.json
      - ${ARTIFACT_RESOURCE}
    expire_in: 1 week
  only:
    - master

test_live_link_checks:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  variables:
    URL: ${LIVE_DOMAIN}
  script:
    - node /etc/node_modules/link-checker/dd-link-checker.js -e live -c ${CI_PROJECT_DIR}/local/etc/link-check-config.js
  only:
    - master

index_algolia:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  script:
    - cp ./local/etc/docsdatadoghq.json /etc/
    - index_docsearch_algolia
  dependencies:
    - build_live
  only:
    - schedules

manage_translations:on-schedule:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  variables:
    URL: ${PREVIEW_DOMAIN}
    CONFIG: ${PREVIEW_CONFIG}
  script:
    - if [[ $(date +%u) -lt 6 ]]; then manage_translations "${APIKEY}"; fi
    - chmod +x ./local/bin/py/translate_metrics.py && ./local/bin/py/translate_metrics.py -k "${APIKEY}" -a $(get_secret 'dd_api_key')
  only:
    - schedules

#push_translations:
#  <<: *base_template
#  stage: post-deploy
#  environment: "live"
#  script:
#    - push_changed_translations
#  only:
#    - master
#  except:
#    - triggers
#    - schedules

test_missing_tms_live:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  allow_failure: true
  dependencies:
    - build_live
  script:
    - check_missing_tms
  only:
    - master

#rollback_live:
#  <<: *base_template
#  stage: cleanup
#  environment: "live"
#  when: on_failure
#  script:
#    - rollback_env
#  only:
#    - master

tag_successful_live_pipeline:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_success
  script:
    - tag_successful_pipeline
  only:
    - master

post_success_event_to_dd_live:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_success
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} succeeded" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "success"
    - post_dd_metric "documentation.pipeline.completed" "1" "" "success"
  only:
    - master

post_failure_event_to_dd_live:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_failure
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} failed" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "error"
    - post_dd_metric "documentation.pipeline.completed" "0" "" "failure"
  only:
    - master
